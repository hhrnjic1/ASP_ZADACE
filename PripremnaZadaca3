#include <cmath>
#include <exception>
#include <iostream>
#include <list>
#include <stdexcept>

using namespace std;
template <typename tip> struct Cvor {
public:
  tip a;
  Cvor *sljedeci = nullptr;
};
template <typename tip> class Stek {
  mutable Cvor<tip> *pocetni;
  mutable Cvor<tip> *krajni;
  mutable Cvor<tip> *t;
  int brElemenata;

public:
  Cvor<tip> *MEGARibi() const {
    if (pocetni == nullptr) {
      return nullptr;
    } else if (pocetni == t) {
      return t;
    }
    Cvor<tip> *ribi;
    for (ribi = pocetni; ribi->sljedeci != t; ribi = ribi->sljedeci) {
    }
    return ribi;
  }
  Stek() {
    pocetni = nullptr;
    krajni = nullptr;
    t = nullptr;
    brElemenata = 0;
  }
  ~Stek() {
    Cvor<tip> *pomocni = pocetni;
    Cvor<tip> *p = nullptr;
    while (pomocni != nullptr) {
      p = pomocni->sljedeci;
      delete pomocni;
      pomocni = p;
    }
    pocetni = nullptr;
    t = nullptr;
    krajni = nullptr;
  }
  Stek(Stek<tip> &nova) {
    if (nova.brElemenata == 0) {
      std::__throw_bad_alloc();
    }
    brElemenata = nova.brElemenata;
    pocetni = nullptr;
    t = nullptr;
    krajni = nullptr;
    for (Cvor<tip> *pomocni = nova.pocetni; pomocni != nullptr;
         pomocni = pomocni->sljedeci) {
      if (pomocni == nova.pocetni) {
        dodajIza(pomocni->a);
        continue;
      }
      dodajIza(pomocni->a);
      sljedeci();
    }
    brElemenata = nova.brElemenata;
  }
  Stek<tip> &operator=(Stek<tip> &nova) {
      if(this->pocetni == nova.pocetni){
          return *this;
      }
    Cvor<tip> *pomocni = pocetni;
    Cvor<tip> *pomocni2 = krajni;
    t = nullptr;
    for (int i = 0; i < brElemenata; i++) {
      pomocni2 = krajni;
      for (pomocni = pocetni; pomocni->sljedeci != krajni;
           pomocni = pomocni->sljedeci) {
      }
      krajni = pomocni;
      delete pomocni2;
    }
    brElemenata = 0;
    if (nova.brElemenata == 0) {
      std::__throw_bad_alloc();
    }
    pocetni = nullptr;
    t = nullptr;
    krajni = nullptr;
    for (Cvor<tip> *pomocni = nova.pocetni; pomocni != nullptr;
         pomocni = pomocni->sljedeci) {
      if (pomocni == nova.pocetni) {
        dodajIza(pomocni->a);
        continue;
      }
      dodajIza(pomocni->a);
      sljedeci();
    }
    brElemenata = nova.brElemenata;
    return *this;
  }
  int brojElemenata() const { return brElemenata; }
  tip &trenutni() {
    if (brElemenata == 0) {
      std::__throw_overflow_error("Lista je prazna!!");
    }
    return t->a;
  }
  tip trenutni() const {
    if (brElemenata == 0) {
      std::__throw_overflow_error("Lista je prazna!!");
    }
    return t->a;
  }
  bool prethodni() const {
    if (brElemenata == 0) {
      std::__throw_overflow_error("Lista je prazna!!");
    }
    if (t == pocetni) {
      return false;
    }
    Cvor<tip> *pomocni;
    pomocni = MEGARibi();
    t = pomocni;
    return true;
  }
  bool sljedeci() const {
    if (brElemenata == 0) {
      std::__throw_overflow_error("Lista je prazna!!");
    }
    if (t == krajni || t->sljedeci == nullptr) {
      return false;
    }
    t = t->sljedeci;
    return true;
  }
  void pocetak() const {
    if (pocetni == nullptr) {
      std::out_of_range("Lista je prazna");
    }
    t = pocetni;
  }
  void kraj() const {
    if (krajni == nullptr && pocetni == nullptr) {
      std::out_of_range("Lista je prazna");
    }
    t = krajni;
  }
  void brisi() {
    Cvor<tip> *pom = pocetni->sljedeci;
    while (brElemenata != 1) {
      delete pocetni;
      pocetni = pom;
      pom = pocetni->sljedeci;
      brElemenata--;
    };
    delete pocetni;
    pocetni = nullptr;
    krajni = nullptr;
    t = nullptr;
    brElemenata--;
  }
  void dodajIspred(const tip &el) {
    if (pocetni == nullptr) {
      pocetni = new Cvor<tip>;
      pocetni->a = el;
      krajni = pocetni;
      brElemenata++;
      return;
    } else if (pocetni == t && t == krajni) {
      Cvor<tip> *pomocni = new Cvor<tip>;
      pomocni->a = el;
      pomocni->sljedeci = pocetni;
      pocetni = pomocni;
      brElemenata++;
      return;
    }
    Cvor<tip> *pomocni2 = new Cvor<tip>;
    pomocni2->a = el;
    pomocni2->sljedeci = pocetni;
    pocetni = pomocni2;
    brElemenata++;
  }
  void dodajIza(const tip &el) {
    if (pocetni == nullptr) {
      pocetni = new Cvor<tip>;
      pocetni->a = el;
      t = pocetni;
      krajni = pocetni;
      brElemenata++;
      return;
    } else if (t == krajni) {
      Cvor<tip> *p = new Cvor<tip>;
      p->a = el;
      krajni = p;
      t->sljedeci = krajni;
      brElemenata++;
      return;
    }
    Cvor<tip> *pomocni;
    pomocni = pocetni->sljedeci;
    Cvor<tip> *pomocni2 = new Cvor<tip>;
    pocetni->sljedeci = pomocni2;
    pocetni->sljedeci->a = el;
    pocetni->sljedeci->sljedeci = pomocni;
    brElemenata++;
  }
  void stavi(tip el) {
    
    dodajIspred(el);
  }
  tip &vrh() { 
      if (pocetni == nullptr) {
          std::__throw_bad_alloc();
      }
      return pocetni->a; }
  tip skini() {
    tip a;
    try{
    a = vrh();
    }catch(std::exception e){
        throw e;
    }
    Cvor<tip> *pom = pocetni->sljedeci;
    delete pocetni;
    pocetni = pom;
    brElemenata--;
    return a;
  }
};
template<typename Tip>

    void StaviSkini(Stek<Tip> &s){
        std::cout<<"Ovom funkcijom popunjavamo stek sa metodom stavi a ispisujemo sa skini: ";
        for (int i = 1; i<=5; i++) {
            s.stavi(i);
        }
        for (int i = 1; i<=5; i++) {
            std::cout<<s.skini()<<" ";
        }
        cout<<endl;
    }
    template<typename Tip>
    void BrojElemenataVrhBrisi(Stek<Tip> &s){
        std::cout<<"Ovom funkcijom ispisujemo broj elemenata: "<<s.brojElemenata()<<", te prikazujemo element sa vrha: "<<s.vrh()<<" te brisemo stek."<<std::endl;
        s.brisi();
    }
int main() {
    Stek<int> s1;
    for (int i = 1; i<=5; i++) {
            s1.stavi(i);
    }
    Stek<int> s2,s3;
    StaviSkini(s2);
    s2 = s1;
    BrojElemenataVrhBrisi(s2);
     std::cout<<"Pozvani su oba kostruktora na dva prazna steka te sada pozovimo sve metode na oba."<<std::endl;
    StaviSkini(s3);
    s3 = s1;
    BrojElemenataVrhBrisi(s3);
    Stek<int> s4(s1);
    BrojElemenataVrhBrisi(s4);
    return 0;
}
